{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","onChange","e","target","value","type","className","onClick","preventDefault","text","completed","id","Math","floor","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","setFilteredTodos","status","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","getItem","setItem","JSON","stringify","localTodos","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cc93693.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Form ({inputText, setInputText, todos, setTodos, setStatus}) {\n  const inputTextHandler = e => {\n    setInputText(e.target.value);\n  }\n  const submitTodoHandler = e => {\n    e.preventDefault();\n    setTodos([\n      ...todos, \n      {text: inputText, completed: false, id: Math.floor(Math.random()*1000)}\n    ]);\n    setInputText(\"\");\n  }\n  const statusHandler = e => {\n    setStatus(e.target.value)\n  }\n\n  return (\n    <div>\n      <form>\n        <input onChange={inputTextHandler} value={inputText} type=\"text\" className=\"todo-input\" />\n        <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <div className=\"select\">\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"uncompleted\">Uncompleted</option>\n          </select>\n        </div>\n      </form>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Todo({text, todo, todos, setTodos}) {\n  // events\n  const deleteHandler = () => {\n    setTodos(todos.filter(el => el.id !== todo.id))\n  }\n  const completeHandler = () => {\n    setTodos(todos.map(item => {\n      if(item.id === todo.id){\n        return {\n          ...item,\n          completed: !item.completed\n        }\n      }\n      return item;\n    }));\n  }\n  return (\n    <div className='todo'>\n      <li className={`todo-item ${todo.completed? 'completed' : ''}`}>{text}</li>\n      <button onClick={completeHandler} className='complete-btn'>\n        <i className='fas fa-check'></i>\n      </button>\n      <button onClick={deleteHandler} className='trash-btn'>\n        <i className='fas fa-trash'></i>\n      </button>\n      \n    </div>\n  )\n}\n","import React from 'react';\nimport Todo from './Todo';\n\nexport default function TodoList({todos, setTodos, filteredTodos}) {\n  return (\n    <div>\n      <div className=\"todo-container\">\n        <ul className=\"todo-list\">\n          {filteredTodos.map(todo => (\n            <Todo \n            text={todo.text} \n            key={todo.id} \n            todos={todos} \n            todo={todo}\n            setTodos={setTodos} />\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  )\n}\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\n// components\nimport Form from './components/Form';\nimport ToDoList from './components/TodoList';\n\nfunction App() {\n  // state\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n\n  // use effect\n  // run once when app loads\n  useEffect(\n    () => {getLocalTodos()},\n    []\n  );\n  // Any time todos state or status state changes, run the function filterHandler to update filteredTodos state\n  useEffect(\n    () => {\n      filterHandler();\n      saveLocalTodos();\n    }, \n    [todos, status]\n  );\n  \n  // handlers\n  const filterHandler = () => {\n    switch (status){\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true))\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false))\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  }\n  // local storage operations\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let localTodos = JSON.parse(localStorage.getItem('todos'))\n      setTodos(localTodos)\n    }\n    }\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n    }\n  \n  return (\n    <div className=\"App\">\n      <header>\n        <h1>ToDo List</h1>\n      </header>\n      <Form \n        todos={todos} \n        setTodos={setTodos} \n        inputText={inputText} \n        setInputText={setInputText}\n        setStatus={setStatus}/>\n      <ToDoList \n        todos={todos} \n        setTodos={setTodos}\n        filteredTodos={filteredTodos} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}